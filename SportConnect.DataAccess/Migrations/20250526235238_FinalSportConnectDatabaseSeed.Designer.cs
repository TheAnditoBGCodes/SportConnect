// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportConnect.DataAccess;

#nullable disable

namespace SportConnect.DataAccess.Migrations
{
    [DbContext(typeof(SportConnectDbContext))]
    [Migration("20250526235238_FinalSportConnectDatabaseSeed")]
    partial class FinalSportConnectDatabaseSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Потребител",
                            NormalizedName = "ПОТРЕБИТЕЛ"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "1",
                            UserId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportConnect.Models.Participation", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.HasKey("ParticipantId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("SportConnect.Models.Sport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = "3e20a87e-d7d5-45f6-b775-7f394a4b31f1",
                            Description = "Интелектуален спорт с фигури",
                            ImageUrl = "\\uploads\\sports\\chess.jpg",
                            Name = "Шахмат"
                        },
                        new
                        {
                            Id = "89d1cc17-0a41-47a2-a9c6-4c9f54b3b1a1",
                            Description = "Игра на хвърляне на стрелички",
                            ImageUrl = "\\uploads\\sports\\darts.jpg",
                            Name = "Дартс"
                        },
                        new
                        {
                            Id = "bf76e9a3-7f2d-4d11-82d2-6b547531ec71",
                            Description = "Спорт с ракети и мрежа",
                            ImageUrl = "\\uploads\\sports\\tennis.jpg",
                            Name = "Тенис"
                        });
                });

            modelBuilder.Entity("SportConnect.Models.SportConnectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53b3c2bc-546e-4207-94b0-1f464c123aaa",
                            Country = "България",
                            DateOfBirth = "2006-03-27",
                            Email = "admin@sportconnect.com",
                            EmailConfirmed = true,
                            FullName = "SportConnect Админ",
                            ImageUrl = "\\uploads\\admin.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SPORTCONNECT.COM",
                            NormalizedUserName = "SPORTCONNECTADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC2djeaOGVbK4PxfKvpPCnAQBruCM0Jqdy0yX9VFwNrCEp0kQp1l4Zed8A2QXlW0gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d92e94ae-9696-409a-8f12-6d12f95be5a4",
                            TwoFactorEnabled = false,
                            UserName = "sportconnectadmin"
                        });
                });

            modelBuilder.Entity("SportConnect.Models.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("SportId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = "3a3cf81f-5f85-4ce3-bc99-45c14555a774",
                            Country = "САЩ",
                            Date = "2025-06-10T10:00:00",
                            Deadline = "2025-05-10T23:59:59",
                            Description = "Световното първенство по шахмат",
                            ImageUrl = "\\uploads\\tournaments\\chess\\worldchampionship.jpg",
                            Name = "World Chess Championship",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "3e20a87e-d7d5-45f6-b775-7f394a4b31f1"
                        },
                        new
                        {
                            Id = "a264b51b-f2a4-48fd-b97b-26ff9fdb2d03",
                            Country = "Германия",
                            Date = "2025-09-05T10:00:00",
                            Deadline = "2025-08-01T23:59:59",
                            Description = "Престижен турнир по шахмат",
                            ImageUrl = "\\uploads\\tournaments\\chess\\candidates.jpg",
                            Name = "Candidates Tournament",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "3e20a87e-d7d5-45f6-b775-7f394a4b31f1"
                        },
                        new
                        {
                            Id = "cf5d37f2-c2b2-4b34-9a20-246aaf114fa1",
                            Country = "Нидерландия",
                            Date = "2025-07-01T14:00:00",
                            Deadline = "2025-06-01T23:59:59",
                            Description = "Световната купа по дартс",
                            ImageUrl = "\\uploads\\tournaments\\darts\\worldcup.jpg",
                            Name = "World Cup",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "89d1cc17-0a41-47a2-a9c6-4c9f54b3b1a1"
                        },
                        new
                        {
                            Id = "51f7e725-2827-4a5d-8b5f-83ad11979f4e",
                            Country = "Обединено кралство",
                            Date = "2025-12-15T14:00:00",
                            Deadline = "2025-11-15T23:59:59",
                            Description = "Най-престижният турнир по дартс",
                            ImageUrl = "\\uploads\\tournaments\\darts\\pdcchampionship.jpg",
                            Name = "World Darts Championship",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "89d1cc17-0a41-47a2-a9c6-4c9f54b3b1a1"
                        },
                        new
                        {
                            Id = "98aa004e-0937-4f1f-85a3-17bd4f77a250",
                            Country = "Франция",
                            Date = "2025-05-26T11:00:00",
                            Deadline = "2025-05-05T23:59:59",
                            Description = "Вторият турнир от Големия шлем",
                            ImageUrl = "\\uploads\\tournaments\\tennis\\rolandgarros.jpg",
                            Name = "Roland Garros",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "bf76e9a3-7f2d-4d11-82d2-6b547531ec71"
                        },
                        new
                        {
                            Id = "c3b5f2a3-56d4-4dbb-91a6-ff6f5b6b8659",
                            Country = "Обединено кралство",
                            Date = "2025-07-01T11:00:00",
                            Deadline = "2025-06-10T23:59:59",
                            Description = "Най-старият турнир по тенис в света",
                            ImageUrl = "\\uploads\\tournaments\\tennis\\wimbledon.jpg",
                            Name = "Wimbledon",
                            OrganizerId = "8ba73947-ec7f-47b7-bb5e-5eae5c217b5b",
                            SportId = "bf76e9a3-7f2d-4d11-82d2-6b547531ec71"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportConnect.Models.SportConnectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportConnect.Models.SportConnectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportConnect.Models.SportConnectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportConnect.Models.SportConnectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportConnect.Models.Participation", b =>
                {
                    b.HasOne("SportConnect.Models.SportConnectUser", "Participant")
                        .WithMany("Participations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportConnect.Models.Tournament", "Tournament")
                        .WithMany("Participations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SportConnect.Models.Tournament", b =>
                {
                    b.HasOne("SportConnect.Models.SportConnectUser", "Organizer")
                        .WithMany("OrganizedTournaments")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportConnect.Models.Sport", "Sport")
                        .WithMany("Tournaments")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportConnect.Models.Sport", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("SportConnect.Models.SportConnectUser", b =>
                {
                    b.Navigation("OrganizedTournaments");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("SportConnect.Models.Tournament", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
